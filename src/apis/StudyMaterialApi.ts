/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseStudyMaterialDto,
  ApiResponseVoid,
} from '../models/index';
import {
    ApiResponseStudyMaterialDtoFromJSON,
    ApiResponseStudyMaterialDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
} from '../models/index';

export interface CreateStudyMaterialRequest {
    subjectId: number;
    teacherId: number;
    title?: string;
    bookIds?: Set<number | null> | null;
    files?: Set<Blob> | null;
}

export interface DeleteStudyMaterialRequest {
    studyMaterialId: number;
}

export interface GetStudyMaterialRequest {
    studyMaterialId: number;
}

export interface GetStudyMaterialFileRequest {
    studyMaterialId: number;
    fileId: number;
}

export interface UpdateStudyMaterialRequest {
    studyMaterialId: number;
    title?: string | null;
    subjectId?: number | null;
    teacherId?: number | null;
    bookIds?: Set<number | null> | null;
    deletedFileIds?: Set<number | null> | null;
    newFiles?: Set<Blob> | null;
}

/**
 * 
 */
export class StudyMaterialApi extends runtime.BaseAPI {

    /**
     * Create a study material
     */
    async createStudyMaterialRaw(requestParameters: CreateStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudyMaterialDto>> {
        if (requestParameters['subjectId'] == null) {
            throw new runtime.RequiredError(
                'subjectId',
                'Required parameter "subjectId" was null or undefined when calling createStudyMaterial().'
            );
        }

        if (requestParameters['teacherId'] == null) {
            throw new runtime.RequiredError(
                'teacherId',
                'Required parameter "teacherId" was null or undefined when calling createStudyMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['subjectId'] != null) {
            formParams.append('subjectId', requestParameters['subjectId'] as any);
        }

        if (requestParameters['teacherId'] != null) {
            formParams.append('teacherId', requestParameters['teacherId'] as any);
        }

        if (requestParameters['bookIds'] != null) {
            formParams.append('bookIds', Array.from(requestParameters['bookIds'])!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/study_materials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudyMaterialDtoFromJSON(jsonValue));
    }

    /**
     * Create a study material
     */
    async createStudyMaterial(requestParameters: CreateStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudyMaterialDto> {
        const response = await this.createStudyMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a study material
     */
    async deleteStudyMaterialRaw(requestParameters: DeleteStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['studyMaterialId'] == null) {
            throw new runtime.RequiredError(
                'studyMaterialId',
                'Required parameter "studyMaterialId" was null or undefined when calling deleteStudyMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/study_materials/{studyMaterialId}`.replace(`{${"studyMaterialId"}}`, encodeURIComponent(String(requestParameters['studyMaterialId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a study material
     */
    async deleteStudyMaterial(requestParameters: DeleteStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteStudyMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a study material by ID
     */
    async getStudyMaterialRaw(requestParameters: GetStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudyMaterialDto>> {
        if (requestParameters['studyMaterialId'] == null) {
            throw new runtime.RequiredError(
                'studyMaterialId',
                'Required parameter "studyMaterialId" was null or undefined when calling getStudyMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/study_materials/{studyMaterialId}`.replace(`{${"studyMaterialId"}}`, encodeURIComponent(String(requestParameters['studyMaterialId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudyMaterialDtoFromJSON(jsonValue));
    }

    /**
     * Get a study material by ID
     */
    async getStudyMaterial(requestParameters: GetStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudyMaterialDto> {
        const response = await this.getStudyMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a study material by file id
     */
    async getStudyMaterialFileRaw(requestParameters: GetStudyMaterialFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['studyMaterialId'] == null) {
            throw new runtime.RequiredError(
                'studyMaterialId',
                'Required parameter "studyMaterialId" was null or undefined when calling getStudyMaterialFile().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling getStudyMaterialFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/study_materials/{studyMaterialId}/files/{fileId}`.replace(`{${"studyMaterialId"}}`, encodeURIComponent(String(requestParameters['studyMaterialId']))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a study material by file id
     */
    async getStudyMaterialFile(requestParameters: GetStudyMaterialFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getStudyMaterialFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a study material
     */
    async updateStudyMaterialRaw(requestParameters: UpdateStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudyMaterialDto>> {
        if (requestParameters['studyMaterialId'] == null) {
            throw new runtime.RequiredError(
                'studyMaterialId',
                'Required parameter "studyMaterialId" was null or undefined when calling updateStudyMaterial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['subjectId'] != null) {
            formParams.append('subjectId', requestParameters['subjectId'] as any);
        }

        if (requestParameters['teacherId'] != null) {
            formParams.append('teacherId', requestParameters['teacherId'] as any);
        }

        if (requestParameters['bookIds'] != null) {
            formParams.append('bookIds', Array.from(requestParameters['bookIds'])!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['deletedFileIds'] != null) {
            formParams.append('deletedFileIds', Array.from(requestParameters['deletedFileIds'])!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['newFiles'] != null) {
            requestParameters['newFiles'].forEach((element) => {
                formParams.append('newFiles', element as any);
            })
        }

        const response = await this.request({
            path: `/study_materials/{studyMaterialId}`.replace(`{${"studyMaterialId"}}`, encodeURIComponent(String(requestParameters['studyMaterialId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudyMaterialDtoFromJSON(jsonValue));
    }

    /**
     * Update a study material
     */
    async updateStudyMaterial(requestParameters: UpdateStudyMaterialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudyMaterialDto> {
        const response = await this.updateStudyMaterialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
