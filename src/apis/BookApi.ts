/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseBookDto,
  ApiResponsePageInfoResponseBookDto,
  ApiResponseVoid,
  GetBooksFilter,
  Pageable,
} from '../models/index';
import {
    ApiResponseBookDtoFromJSON,
    ApiResponseBookDtoToJSON,
    ApiResponsePageInfoResponseBookDtoFromJSON,
    ApiResponsePageInfoResponseBookDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    GetBooksFilterFromJSON,
    GetBooksFilterToJSON,
    PageableFromJSON,
    PageableToJSON,
} from '../models/index';

export interface CreateBookRequest {
    title: string;
    author: string;
    isbn: string;
    publisher: string;
    language: string;
    categoryIds: Set<number>;
    coverPhotoIndex: number;
    file?: Blob;
    photos?: Array<Blob>;
}

export interface DeleteBookRequest {
    bookId: number;
}

export interface GetBookRequest {
    bookId: number;
}

export interface GetBookFileRequest {
    bookId: number;
}

export interface GetBookPhotoFileRequest {
    bookId: number;
    photoId: number;
}

export interface GetBooksRequest {
    getBooksFilter: GetBooksFilter;
    pageable: Pageable;
}

export interface UpdateBookRequest {
    bookId: number;
    title?: string | null;
    author?: string | null;
    isbn?: string | null;
    publisher?: string | null;
    language?: string | null;
    categoryIds?: Set<number | null> | null;
    file?: Blob;
}

/**
 * 
 */
export class BookApi extends runtime.BaseAPI {

    /**
     * Create a book
     */
    async createBookRaw(requestParameters: CreateBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBookDto>> {
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling createBook().'
            );
        }

        if (requestParameters['author'] == null) {
            throw new runtime.RequiredError(
                'author',
                'Required parameter "author" was null or undefined when calling createBook().'
            );
        }

        if (requestParameters['isbn'] == null) {
            throw new runtime.RequiredError(
                'isbn',
                'Required parameter "isbn" was null or undefined when calling createBook().'
            );
        }

        if (requestParameters['publisher'] == null) {
            throw new runtime.RequiredError(
                'publisher',
                'Required parameter "publisher" was null or undefined when calling createBook().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling createBook().'
            );
        }

        if (requestParameters['categoryIds'] == null) {
            throw new runtime.RequiredError(
                'categoryIds',
                'Required parameter "categoryIds" was null or undefined when calling createBook().'
            );
        }

        if (requestParameters['coverPhotoIndex'] == null) {
            throw new runtime.RequiredError(
                'coverPhotoIndex',
                'Required parameter "coverPhotoIndex" was null or undefined when calling createBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['author'] != null) {
            formParams.append('author', requestParameters['author'] as any);
        }

        if (requestParameters['isbn'] != null) {
            formParams.append('isbn', requestParameters['isbn'] as any);
        }

        if (requestParameters['publisher'] != null) {
            formParams.append('publisher', requestParameters['publisher'] as any);
        }

        if (requestParameters['language'] != null) {
            formParams.append('language', requestParameters['language'] as any);
        }

        if (requestParameters['categoryIds'] != null) {
            formParams.append('categoryIds', Array.from(requestParameters['categoryIds'])!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['photos'] != null) {
            requestParameters['photos'].forEach((element) => {
                formParams.append('photos', element as any);
            })
        }

        if (requestParameters['coverPhotoIndex'] != null) {
            formParams.append('coverPhotoIndex', requestParameters['coverPhotoIndex'] as any);
        }

        const response = await this.request({
            path: `/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Create a book
     */
    async createBook(requestParameters: CreateBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBookDto> {
        const response = await this.createBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a book
     */
    async deleteBookRaw(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling deleteBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a book
     */
    async deleteBook(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a book by ID
     */
    async getBookRaw(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBookDto>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Get a book by ID
     */
    async getBook(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBookDto> {
        const response = await this.getBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a book
     */
    async getBookFileRaw(requestParameters: GetBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBookFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}/file`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a book
     */
    async getBookFile(requestParameters: GetBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getBookFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a book photo
     */
    async getBookPhotoFileRaw(requestParameters: GetBookPhotoFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBookPhotoFile().'
            );
        }

        if (requestParameters['photoId'] == null) {
            throw new runtime.RequiredError(
                'photoId',
                'Required parameter "photoId" was null or undefined when calling getBookPhotoFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}/photos/{photoId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))).replace(`{${"photoId"}}`, encodeURIComponent(String(requestParameters['photoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a book photo
     */
    async getBookPhotoFile(requestParameters: GetBookPhotoFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getBookPhotoFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get books
     */
    async getBooksRaw(requestParameters: GetBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseBookDto>> {
        if (requestParameters['getBooksFilter'] == null) {
            throw new runtime.RequiredError(
                'getBooksFilter',
                'Required parameter "getBooksFilter" was null or undefined when calling getBooks().'
            );
        }

        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getBooks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['getBooksFilter'] != null) {
            queryParameters['getBooksFilter'] = requestParameters['getBooksFilter'];
        }

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Get books
     */
    async getBooks(requestParameters: GetBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseBookDto> {
        const response = await this.getBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a book
     */
    async updateBookRaw(requestParameters: UpdateBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBookDto>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling updateBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['author'] != null) {
            formParams.append('author', requestParameters['author'] as any);
        }

        if (requestParameters['isbn'] != null) {
            formParams.append('isbn', requestParameters['isbn'] as any);
        }

        if (requestParameters['publisher'] != null) {
            formParams.append('publisher', requestParameters['publisher'] as any);
        }

        if (requestParameters['language'] != null) {
            formParams.append('language', requestParameters['language'] as any);
        }

        if (requestParameters['categoryIds'] != null) {
            formParams.append('categoryIds', Array.from(requestParameters['categoryIds'])!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Update a book
     */
    async updateBook(requestParameters: UpdateBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBookDto> {
        const response = await this.updateBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
