/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseBookDto,
  ApiResponseFileDto,
  ApiResponseListFileDto,
  ApiResponsePageInfoResponseBookDto,
  ApiResponseVoid,
  CreateBookRequest,
  DeleteBookPhotosRequest,
  ReplaceBookFileRequest,
  UpdateBookPhotoOrdersRequest,
  UpdateBookRequest,
} from '../models/index';
import {
    ApiResponseBookDtoFromJSON,
    ApiResponseBookDtoToJSON,
    ApiResponseFileDtoFromJSON,
    ApiResponseFileDtoToJSON,
    ApiResponseListFileDtoFromJSON,
    ApiResponseListFileDtoToJSON,
    ApiResponsePageInfoResponseBookDtoFromJSON,
    ApiResponsePageInfoResponseBookDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    CreateBookRequestFromJSON,
    CreateBookRequestToJSON,
    DeleteBookPhotosRequestFromJSON,
    DeleteBookPhotosRequestToJSON,
    ReplaceBookFileRequestFromJSON,
    ReplaceBookFileRequestToJSON,
    UpdateBookPhotoOrdersRequestFromJSON,
    UpdateBookPhotoOrdersRequestToJSON,
    UpdateBookRequestFromJSON,
    UpdateBookRequestToJSON,
} from '../models/index';

export interface CreateBookOperationRequest {
    createBookRequest: CreateBookRequest;
}

export interface CreateBookFileRequest {
    bookId: number;
    file: Blob;
}

export interface CreateBookPhotoFilesRequest {
    bookId: number;
    photos?: Array<Blob>;
    photoOrders?: Array<number>;
}

export interface DeleteBookRequest {
    bookId: number;
}

export interface DeleteBookPhotosOperationRequest {
    bookId: number;
    request: DeleteBookPhotosRequest;
}

export interface DownloadBookFileRequest {
    bookId: number;
}

export interface DownloadBookPhotoRequest {
    bookId: number;
    photoId: number;
}

export interface GetBookRequest {
    bookId: number;
}

export interface GetBooksRequest {
    title?: string | null;
    author?: string | null;
    publisher?: string | null;
    isbn?: string | null;
    categoryIds?: Set<number> | null;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface ReplaceBookFileOperationRequest {
    request: ReplaceBookFileRequest;
    bookId: number;
}

export interface UpdateBookOperationRequest {
    bookId: number;
    updateBookRequest: UpdateBookRequest;
}

export interface UpdateBookPhotoOrdersOperationRequest {
    bookId: number;
    updateBookPhotoOrdersRequest: UpdateBookPhotoOrdersRequest;
}

/**
 * 
 */
export class BookApi extends runtime.BaseAPI {

    /**
     * Create a book
     */
    async createBookRaw(requestParameters: CreateBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBookDto>> {
        if (requestParameters['createBookRequest'] == null) {
            throw new runtime.RequiredError(
                'createBookRequest',
                'Required parameter "createBookRequest" was null or undefined when calling createBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBookRequestToJSON(requestParameters['createBookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Create a book
     */
    async createBook(requestParameters: CreateBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBookDto> {
        const response = await this.createBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a book file
     */
    async createBookFileRaw(requestParameters: CreateBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFileDto>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling createBookFile().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling createBookFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/books/{bookId}/file`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseFileDtoFromJSON(jsonValue));
    }

    /**
     * Create a book file
     */
    async createBookFile(requestParameters: CreateBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFileDto> {
        const response = await this.createBookFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create book photos
     */
    async createBookPhotoFilesRaw(requestParameters: CreateBookPhotoFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListFileDto>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling createBookPhotoFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['photos'] != null) {
            requestParameters['photos'].forEach((element) => {
                formParams.append('photos', element as any);
            })
        }

        if (requestParameters['photoOrders'] != null) {
            formParams.append('photoOrders', requestParameters['photoOrders']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        const response = await this.request({
            path: `/books/{bookId}/photos`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseListFileDtoFromJSON(jsonValue));
    }

    /**
     * Create book photos
     */
    async createBookPhotoFiles(requestParameters: CreateBookPhotoFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListFileDto> {
        const response = await this.createBookPhotoFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a book
     */
    async deleteBookRaw(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling deleteBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a book
     */
    async deleteBook(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete book photos by IDs
     */
    async deleteBookPhotosRaw(requestParameters: DeleteBookPhotosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling deleteBookPhotos().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling deleteBookPhotos().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}/photos`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete book photos by IDs
     */
    async deleteBookPhotos(requestParameters: DeleteBookPhotosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteBookPhotosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a book file
     */
    async downloadBookFileRaw(requestParameters: DownloadBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling downloadBookFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}/file/download`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a book file
     */
    async downloadBookFile(requestParameters: DownloadBookFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadBookFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a book photo
     */
    async downloadBookPhotoRaw(requestParameters: DownloadBookPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling downloadBookPhoto().'
            );
        }

        if (requestParameters['photoId'] == null) {
            throw new runtime.RequiredError(
                'photoId',
                'Required parameter "photoId" was null or undefined when calling downloadBookPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}/photos/{photoId}/download`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))).replace(`{${"photoId"}}`, encodeURIComponent(String(requestParameters['photoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a book photo
     */
    async downloadBookPhoto(requestParameters: DownloadBookPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadBookPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a book by ID
     */
    async getBookRaw(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBookDto>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Get a book by ID
     */
    async getBook(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBookDto> {
        const response = await this.getBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get books
     */
    async getBooksRaw(requestParameters: GetBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseBookDto>> {
        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['publisher'] != null) {
            queryParameters['publisher'] = requestParameters['publisher'];
        }

        if (requestParameters['isbn'] != null) {
            queryParameters['isbn'] = requestParameters['isbn'];
        }

        if (requestParameters['categoryIds'] != null) {
            queryParameters['categoryIds'] = requestParameters['categoryIds'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Get books
     */
    async getBooks(requestParameters: GetBooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseBookDto> {
        const response = await this.getBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace a book file
     */
    async replaceBookFileRaw(requestParameters: ReplaceBookFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseFileDto>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling replaceBookFile().'
            );
        }

        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling replaceBookFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}/file`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseFileDtoFromJSON(jsonValue));
    }

    /**
     * Replace a book file
     */
    async replaceBookFile(requestParameters: ReplaceBookFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseFileDto> {
        const response = await this.replaceBookFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a book
     */
    async updateBookRaw(requestParameters: UpdateBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseBookDto>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling updateBook().'
            );
        }

        if (requestParameters['updateBookRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBookRequest',
                'Required parameter "updateBookRequest" was null or undefined when calling updateBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBookRequestToJSON(requestParameters['updateBookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseBookDtoFromJSON(jsonValue));
    }

    /**
     * Update a book
     */
    async updateBook(requestParameters: UpdateBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseBookDto> {
        const response = await this.updateBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update book photos orders
     */
    async updateBookPhotoOrdersRaw(requestParameters: UpdateBookPhotoOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling updateBookPhotoOrders().'
            );
        }

        if (requestParameters['updateBookPhotoOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBookPhotoOrdersRequest',
                'Required parameter "updateBookPhotoOrdersRequest" was null or undefined when calling updateBookPhotoOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/books/{bookId}/photos/orders`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBookPhotoOrdersRequestToJSON(requestParameters['updateBookPhotoOrdersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Update book photos orders
     */
    async updateBookPhotoOrders(requestParameters: UpdateBookPhotoOrdersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.updateBookPhotoOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
