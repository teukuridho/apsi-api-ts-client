/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseAssessmentBaseDto,
  ApiResponseAssessmentItemDetailDto,
  ApiResponsePageInfoResponseAssessmentDetailDto,
  ApiResponsePageInfoResponseAssessmentItemDetailDto,
  ApiResponseVoid,
  CreateAssessmentItemRequest,
  CreateAssessmentRequest,
  UpdateAssessmentItemRequest,
  UpdateAssessmentRequest,
} from '../models/index';
import {
    ApiResponseAssessmentBaseDtoFromJSON,
    ApiResponseAssessmentBaseDtoToJSON,
    ApiResponseAssessmentItemDetailDtoFromJSON,
    ApiResponseAssessmentItemDetailDtoToJSON,
    ApiResponsePageInfoResponseAssessmentDetailDtoFromJSON,
    ApiResponsePageInfoResponseAssessmentDetailDtoToJSON,
    ApiResponsePageInfoResponseAssessmentItemDetailDtoFromJSON,
    ApiResponsePageInfoResponseAssessmentItemDetailDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    CreateAssessmentItemRequestFromJSON,
    CreateAssessmentItemRequestToJSON,
    CreateAssessmentRequestFromJSON,
    CreateAssessmentRequestToJSON,
    UpdateAssessmentItemRequestFromJSON,
    UpdateAssessmentItemRequestToJSON,
    UpdateAssessmentRequestFromJSON,
    UpdateAssessmentRequestToJSON,
} from '../models/index';

export interface CreateAssessmentOperationRequest {
    createAssessmentRequest: CreateAssessmentRequest;
}

export interface CreateItemOfAssessmentRequest {
    assessmentId: number;
    createAssessmentItemRequest: CreateAssessmentItemRequest;
}

export interface DeleteAssessmentRequest {
    assessmentId: number;
}

export interface DeleteItemOfAssessmentRequest {
    itemId: number;
}

export interface GetAllAssessmentsRequest {
    subjectId?: number | null;
    title?: string | null;
    description?: string | null;
    type?: GetAllAssessmentsTypeEnum;
    status?: GetAllAssessmentsStatusEnum;
    startAt?: Date | null;
    endAt?: Date | null;
    randomOrder?: boolean | null;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllItemsOfAssessmentRequest {
    assessmentId: number;
    description?: string | null;
    type?: GetAllItemsOfAssessmentTypeEnum;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAssessmentByIdRequest {
    assessmentId: number;
}

export interface UpdateAssessmentOperationRequest {
    assessmentId: number;
    updateAssessmentRequest: UpdateAssessmentRequest;
}

export interface UpdateItemOfAssessmentRequest {
    itemId: number;
    updateAssessmentItemRequest: UpdateAssessmentItemRequest;
}

/**
 * 
 */
export class AssessmentsNotTestedYetApi extends runtime.BaseAPI {

    /**
     * Create an assessment
     */
    async createAssessmentRaw(requestParameters: CreateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAssessmentBaseDto>> {
        if (requestParameters['createAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'createAssessmentRequest',
                'Required parameter "createAssessmentRequest" was null or undefined when calling createAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssessmentRequestToJSON(requestParameters['createAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAssessmentBaseDtoFromJSON(jsonValue));
    }

    /**
     * Create an assessment
     */
    async createAssessment(requestParameters: CreateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAssessmentBaseDto> {
        const response = await this.createAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an item of an assessment
     */
    async createItemOfAssessmentRaw(requestParameters: CreateItemOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAssessmentItemDetailDto>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling createItemOfAssessment().'
            );
        }

        if (requestParameters['createAssessmentItemRequest'] == null) {
            throw new runtime.RequiredError(
                'createAssessmentItemRequest',
                'Required parameter "createAssessmentItemRequest" was null or undefined when calling createItemOfAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments/{assessmentId}/items`.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssessmentItemRequestToJSON(requestParameters['createAssessmentItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAssessmentItemDetailDtoFromJSON(jsonValue));
    }

    /**
     * Create an item of an assessment
     */
    async createItemOfAssessment(requestParameters: CreateItemOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAssessmentItemDetailDto> {
        const response = await this.createItemOfAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an assessment
     */
    async deleteAssessmentRaw(requestParameters: DeleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling deleteAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments/{assessmentId}`.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete an assessment
     */
    async deleteAssessment(requestParameters: DeleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an item of an assessment
     */
    async deleteItemOfAssessmentRaw(requestParameters: DeleteItemOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteItemOfAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments/items/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete an item of an assessment
     */
    async deleteItemOfAssessment(requestParameters: DeleteItemOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteItemOfAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all assessments
     */
    async getAllAssessmentsRaw(requestParameters: GetAllAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseAssessmentDetailDto>> {
        const queryParameters: any = {};

        if (requestParameters['subjectId'] != null) {
            queryParameters['subjectId'] = requestParameters['subjectId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = (requestParameters['startAt'] as any).toISOString();
        }

        if (requestParameters['endAt'] != null) {
            queryParameters['endAt'] = (requestParameters['endAt'] as any).toISOString();
        }

        if (requestParameters['randomOrder'] != null) {
            queryParameters['randomOrder'] = requestParameters['randomOrder'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseAssessmentDetailDtoFromJSON(jsonValue));
    }

    /**
     * Get all assessments
     */
    async getAllAssessments(requestParameters: GetAllAssessmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseAssessmentDetailDto> {
        const response = await this.getAllAssessmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all items of an assessment
     */
    async getAllItemsOfAssessmentRaw(requestParameters: GetAllItemsOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseAssessmentItemDetailDto>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling getAllItemsOfAssessment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments/{assessmentId}/items`.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseAssessmentItemDetailDtoFromJSON(jsonValue));
    }

    /**
     * Get all items of an assessment
     */
    async getAllItemsOfAssessment(requestParameters: GetAllItemsOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseAssessmentItemDetailDto> {
        const response = await this.getAllItemsOfAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an assessment by id
     */
    async getAssessmentByIdRaw(requestParameters: GetAssessmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAssessmentBaseDto>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling getAssessmentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments/{assessmentId}`.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAssessmentBaseDtoFromJSON(jsonValue));
    }

    /**
     * Get an assessment by id
     */
    async getAssessmentById(requestParameters: GetAssessmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAssessmentBaseDto> {
        const response = await this.getAssessmentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an assessment
     */
    async updateAssessmentRaw(requestParameters: UpdateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAssessmentBaseDto>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling updateAssessment().'
            );
        }

        if (requestParameters['updateAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAssessmentRequest',
                'Required parameter "updateAssessmentRequest" was null or undefined when calling updateAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments/{assessmentId}`.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssessmentRequestToJSON(requestParameters['updateAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAssessmentBaseDtoFromJSON(jsonValue));
    }

    /**
     * Update an assessment
     */
    async updateAssessment(requestParameters: UpdateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAssessmentBaseDto> {
        const response = await this.updateAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an item of an assessment
     */
    async updateItemOfAssessmentRaw(requestParameters: UpdateItemOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAssessmentItemDetailDto>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateItemOfAssessment().'
            );
        }

        if (requestParameters['updateAssessmentItemRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAssessmentItemRequest',
                'Required parameter "updateAssessmentItemRequest" was null or undefined when calling updateItemOfAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assessments/items/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssessmentItemRequestToJSON(requestParameters['updateAssessmentItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAssessmentItemDetailDtoFromJSON(jsonValue));
    }

    /**
     * Update an item of an assessment
     */
    async updateItemOfAssessment(requestParameters: UpdateItemOfAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAssessmentItemDetailDto> {
        const response = await this.updateItemOfAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllAssessmentsTypeEnum = {
    Homework: 'HOMEWORK',
    Quiz: 'QUIZ',
    Uts: 'UTS',
    Uas: 'UAS',
    Remedial: 'REMEDIAL'
} as const;
export type GetAllAssessmentsTypeEnum = typeof GetAllAssessmentsTypeEnum[keyof typeof GetAllAssessmentsTypeEnum];
/**
 * @export
 */
export const GetAllAssessmentsStatusEnum = {
    Draft: 'DRAFT',
    Published: 'PUBLISHED',
    Archived: 'ARCHIVED'
} as const;
export type GetAllAssessmentsStatusEnum = typeof GetAllAssessmentsStatusEnum[keyof typeof GetAllAssessmentsStatusEnum];
/**
 * @export
 */
export const GetAllItemsOfAssessmentTypeEnum = {
    Question: 'QUESTION'
} as const;
export type GetAllItemsOfAssessmentTypeEnum = typeof GetAllItemsOfAssessmentTypeEnum[keyof typeof GetAllItemsOfAssessmentTypeEnum];
