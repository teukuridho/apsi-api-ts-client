/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponsePageInfoResponseSubjectDto,
  ApiResponseSubjectDto,
  ApiResponseVoid,
  CreateSubjectRequest,
  UpdateSubjectRequest,
} from '../models/index';
import {
    ApiResponsePageInfoResponseSubjectDtoFromJSON,
    ApiResponsePageInfoResponseSubjectDtoToJSON,
    ApiResponseSubjectDtoFromJSON,
    ApiResponseSubjectDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    CreateSubjectRequestFromJSON,
    CreateSubjectRequestToJSON,
    UpdateSubjectRequestFromJSON,
    UpdateSubjectRequestToJSON,
} from '../models/index';

export interface CreateSubjectOperationRequest {
    createSubjectRequest: CreateSubjectRequest;
}

export interface DeleteSubjectRequest {
    subjectId: number;
}

export interface GetSubjectByIdRequest {
    subjectId: number;
}

export interface GetSubjectsRequest {
    name?: string | null;
    gradeLevel?: string | null;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface UpdateSubjectOperationRequest {
    subjectId: number;
    updateSubjectRequest: UpdateSubjectRequest;
}

/**
 * 
 */
export class SubjectApi extends runtime.BaseAPI {

    /**
     * Create a subject
     */
    async createSubjectRaw(requestParameters: CreateSubjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseSubjectDto>> {
        if (requestParameters['createSubjectRequest'] == null) {
            throw new runtime.RequiredError(
                'createSubjectRequest',
                'Required parameter "createSubjectRequest" was null or undefined when calling createSubject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subjects/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubjectRequestToJSON(requestParameters['createSubjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseSubjectDtoFromJSON(jsonValue));
    }

    /**
     * Create a subject
     */
    async createSubject(requestParameters: CreateSubjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseSubjectDto> {
        const response = await this.createSubjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a subject
     */
    async deleteSubjectRaw(requestParameters: DeleteSubjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['subjectId'] == null) {
            throw new runtime.RequiredError(
                'subjectId',
                'Required parameter "subjectId" was null or undefined when calling deleteSubject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subjects/{subjectId}`.replace(`{${"subjectId"}}`, encodeURIComponent(String(requestParameters['subjectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a subject
     */
    async deleteSubject(requestParameters: DeleteSubjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteSubjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a subject by ID
     */
    async getSubjectByIdRaw(requestParameters: GetSubjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseSubjectDto>> {
        if (requestParameters['subjectId'] == null) {
            throw new runtime.RequiredError(
                'subjectId',
                'Required parameter "subjectId" was null or undefined when calling getSubjectById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subjects/{subjectId}`.replace(`{${"subjectId"}}`, encodeURIComponent(String(requestParameters['subjectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseSubjectDtoFromJSON(jsonValue));
    }

    /**
     * Get a subject by ID
     */
    async getSubjectById(requestParameters: GetSubjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseSubjectDto> {
        const response = await this.getSubjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subjects
     */
    async getSubjectsRaw(requestParameters: GetSubjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseSubjectDto>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['gradeLevel'] != null) {
            queryParameters['gradeLevel'] = requestParameters['gradeLevel'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subjects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseSubjectDtoFromJSON(jsonValue));
    }

    /**
     * Get subjects
     */
    async getSubjects(requestParameters: GetSubjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseSubjectDto> {
        const response = await this.getSubjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a subject
     */
    async updateSubjectRaw(requestParameters: UpdateSubjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseSubjectDto>> {
        if (requestParameters['subjectId'] == null) {
            throw new runtime.RequiredError(
                'subjectId',
                'Required parameter "subjectId" was null or undefined when calling updateSubject().'
            );
        }

        if (requestParameters['updateSubjectRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSubjectRequest',
                'Required parameter "updateSubjectRequest" was null or undefined when calling updateSubject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/subjects/{subjectId}`.replace(`{${"subjectId"}}`, encodeURIComponent(String(requestParameters['subjectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubjectRequestToJSON(requestParameters['updateSubjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseSubjectDtoFromJSON(jsonValue));
    }

    /**
     * Update a subject
     */
    async updateSubject(requestParameters: UpdateSubjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseSubjectDto> {
        const response = await this.updateSubjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
