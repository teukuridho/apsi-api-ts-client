/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseScheduleDto,
  ApiResponseVoid,
  CreateScheduleRequest,
  UpdateScheduleRequest,
} from '../models/index';
import {
    ApiResponseScheduleDtoFromJSON,
    ApiResponseScheduleDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    CreateScheduleRequestFromJSON,
    CreateScheduleRequestToJSON,
    UpdateScheduleRequestFromJSON,
    UpdateScheduleRequestToJSON,
} from '../models/index';

export interface CreateScheduleOperationRequest {
    createScheduleRequest: CreateScheduleRequest;
}

export interface DeleteScheduleRequest {
    scheduleId: number;
}

export interface GetScheduleByIdRequest {
    scheduleId: number;
}

export interface UpdateScheduleOperationRequest {
    scheduleId: number;
    updateScheduleRequest: UpdateScheduleRequest;
}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI {

    /**
     * Create a schedule
     */
    async createScheduleRaw(requestParameters: CreateScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseScheduleDto>> {
        if (requestParameters['createScheduleRequest'] == null) {
            throw new runtime.RequiredError(
                'createScheduleRequest',
                'Required parameter "createScheduleRequest" was null or undefined when calling createSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScheduleRequestToJSON(requestParameters['createScheduleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseScheduleDtoFromJSON(jsonValue));
    }

    /**
     * Create a schedule
     */
    async createSchedule(requestParameters: CreateScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseScheduleDto> {
        const response = await this.createScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a schedule
     */
    async deleteScheduleRaw(requestParameters: DeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling deleteSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{scheduleId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a schedule
     */
    async deleteSchedule(requestParameters: DeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a schedule by ID
     */
    async getScheduleByIdRaw(requestParameters: GetScheduleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseScheduleDto>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling getScheduleById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{scheduleId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseScheduleDtoFromJSON(jsonValue));
    }

    /**
     * Get a schedule by ID
     */
    async getScheduleById(requestParameters: GetScheduleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseScheduleDto> {
        const response = await this.getScheduleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a schedule
     */
    async updateScheduleRaw(requestParameters: UpdateScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseScheduleDto>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling updateSchedule().'
            );
        }

        if (requestParameters['updateScheduleRequest'] == null) {
            throw new runtime.RequiredError(
                'updateScheduleRequest',
                'Required parameter "updateScheduleRequest" was null or undefined when calling updateSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/schedules/{scheduleId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduleRequestToJSON(requestParameters['updateScheduleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseScheduleDtoFromJSON(jsonValue));
    }

    /**
     * Update a schedule
     */
    async updateSchedule(requestParameters: UpdateScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseScheduleDto> {
        const response = await this.updateScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
