/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseListStudentAssessmentDto,
  ApiResponsePageInfoResponseStudentAssessmentDto,
  ApiResponsePageInfoResponseStudentAssessmentItemDto,
  ApiResponseStudentAssessmentDto,
  ApiResponseStudentAssessmentItemDto,
  ApiResponseVoid,
  CreateBatchStudentAssessmentRequest,
  CreateOrUpdateAssignedStudentAssessmentItemRequest,
  DeleteBatchStudentAssessmentRequest,
  GradeStudentAssessmentRequest,
  UpdateStudentAssessmentItemRequest,
} from '../models/index';
import {
    ApiResponseListStudentAssessmentDtoFromJSON,
    ApiResponseListStudentAssessmentDtoToJSON,
    ApiResponsePageInfoResponseStudentAssessmentDtoFromJSON,
    ApiResponsePageInfoResponseStudentAssessmentDtoToJSON,
    ApiResponsePageInfoResponseStudentAssessmentItemDtoFromJSON,
    ApiResponsePageInfoResponseStudentAssessmentItemDtoToJSON,
    ApiResponseStudentAssessmentDtoFromJSON,
    ApiResponseStudentAssessmentDtoToJSON,
    ApiResponseStudentAssessmentItemDtoFromJSON,
    ApiResponseStudentAssessmentItemDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    CreateBatchStudentAssessmentRequestFromJSON,
    CreateBatchStudentAssessmentRequestToJSON,
    CreateOrUpdateAssignedStudentAssessmentItemRequestFromJSON,
    CreateOrUpdateAssignedStudentAssessmentItemRequestToJSON,
    DeleteBatchStudentAssessmentRequestFromJSON,
    DeleteBatchStudentAssessmentRequestToJSON,
    GradeStudentAssessmentRequestFromJSON,
    GradeStudentAssessmentRequestToJSON,
    UpdateStudentAssessmentItemRequestFromJSON,
    UpdateStudentAssessmentItemRequestToJSON,
} from '../models/index';

export interface CreateBatchOfStudentAssessmentRequest {
    assessmentId: number;
    createBatchStudentAssessmentRequest: CreateBatchStudentAssessmentRequest;
}

export interface CreateOrUpdateAssignedStudentAssessmentItemOperationRequest {
    studentAssessmentId: number;
    createOrUpdateAssignedStudentAssessmentItemRequest: CreateOrUpdateAssignedStudentAssessmentItemRequest;
}

export interface DeleteBatchOfStudentAssessmentRequest {
    request: DeleteBatchStudentAssessmentRequest;
}

export interface GetAllStudentAssessmentsRequest {
    assessmentId: number;
    studentIds?: Array<number> | null;
    isRetake?: boolean | null;
    status?: GetAllStudentAssessmentsStatusEnum;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAssignedStudentAssessmentRequest {
    studentAssessmentId: number;
}

export interface GetAssignedStudentAssessmentItemsRequest {
    studentAssessmentId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAssignedStudentAssessmentsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetStudentAssessmentItemsRequest {
    studentAssessmentId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GradeStudentAssessmentOperationRequest {
    studentAssessmentId: number;
    gradeStudentAssessmentRequest: GradeStudentAssessmentRequest;
}

export interface StartAssignedStudentAssessmentRequest {
    studentAssessmentId: number;
}

export interface SubmitAssignedStudentAssessmentRequest {
    studentAssessmentId: number;
}

export interface UpdateStudentAssessmentItemOperationRequest {
    studentAssessmentItemId: number;
    updateStudentAssessmentItemRequest: UpdateStudentAssessmentItemRequest;
}

/**
 * 
 */
export class StudentAssessmentsNotTestedYetApi extends runtime.BaseAPI {

    /**
     * Create a batch of student assessment
     */
    async createBatchOfStudentAssessmentRaw(requestParameters: CreateBatchOfStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListStudentAssessmentDto>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling createBatchOfStudentAssessment().'
            );
        }

        if (requestParameters['createBatchStudentAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'createBatchStudentAssessmentRequest',
                'Required parameter "createBatchStudentAssessmentRequest" was null or undefined when calling createBatchOfStudentAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/assessments/{assessmentId}/batch`.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchStudentAssessmentRequestToJSON(requestParameters['createBatchStudentAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseListStudentAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Create a batch of student assessment
     */
    async createBatchOfStudentAssessment(requestParameters: CreateBatchOfStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListStudentAssessmentDto> {
        const response = await this.createBatchOfStudentAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update an assigned student assessment item
     */
    async createOrUpdateAssignedStudentAssessmentItemRaw(requestParameters: CreateOrUpdateAssignedStudentAssessmentItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudentAssessmentItemDto>> {
        if (requestParameters['studentAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentId',
                'Required parameter "studentAssessmentId" was null or undefined when calling createOrUpdateAssignedStudentAssessmentItem().'
            );
        }

        if (requestParameters['createOrUpdateAssignedStudentAssessmentItemRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrUpdateAssignedStudentAssessmentItemRequest',
                'Required parameter "createOrUpdateAssignedStudentAssessmentItemRequest" was null or undefined when calling createOrUpdateAssignedStudentAssessmentItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/self/{studentAssessmentId}/items`.replace(`{${"studentAssessmentId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdateAssignedStudentAssessmentItemRequestToJSON(requestParameters['createOrUpdateAssignedStudentAssessmentItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudentAssessmentItemDtoFromJSON(jsonValue));
    }

    /**
     * Create or update an assigned student assessment item
     */
    async createOrUpdateAssignedStudentAssessmentItem(requestParameters: CreateOrUpdateAssignedStudentAssessmentItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudentAssessmentItemDto> {
        const response = await this.createOrUpdateAssignedStudentAssessmentItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of student assessment
     */
    async deleteBatchOfStudentAssessmentRaw(requestParameters: DeleteBatchOfStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling deleteBatchOfStudentAssessment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/assessments/batch`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a batch of student assessment
     */
    async deleteBatchOfStudentAssessment(requestParameters: DeleteBatchOfStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteBatchOfStudentAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all student assessments
     */
    async getAllStudentAssessmentsRaw(requestParameters: GetAllStudentAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseStudentAssessmentDto>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling getAllStudentAssessments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['studentIds'] != null) {
            queryParameters['studentIds'] = requestParameters['studentIds'];
        }

        if (requestParameters['isRetake'] != null) {
            queryParameters['isRetake'] = requestParameters['isRetake'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/assessments/{assessmentId}`.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseStudentAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Get all student assessments
     */
    async getAllStudentAssessments(requestParameters: GetAllStudentAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseStudentAssessmentDto> {
        const response = await this.getAllStudentAssessmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an assigned student assessment
     */
    async getAssignedStudentAssessmentRaw(requestParameters: GetAssignedStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudentAssessmentDto>> {
        if (requestParameters['studentAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentId',
                'Required parameter "studentAssessmentId" was null or undefined when calling getAssignedStudentAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/self/{studentAssessmentId}`.replace(`{${"studentAssessmentId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudentAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Get an assigned student assessment
     */
    async getAssignedStudentAssessment(requestParameters: GetAssignedStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudentAssessmentDto> {
        const response = await this.getAssignedStudentAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get items of an assigned student assessment
     */
    async getAssignedStudentAssessmentItemsRaw(requestParameters: GetAssignedStudentAssessmentItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseStudentAssessmentItemDto>> {
        if (requestParameters['studentAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentId',
                'Required parameter "studentAssessmentId" was null or undefined when calling getAssignedStudentAssessmentItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/self/{studentAssessmentId}/items`.replace(`{${"studentAssessmentId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseStudentAssessmentItemDtoFromJSON(jsonValue));
    }

    /**
     * Get items of an assigned student assessment
     */
    async getAssignedStudentAssessmentItems(requestParameters: GetAssignedStudentAssessmentItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseStudentAssessmentItemDto> {
        const response = await this.getAssignedStudentAssessmentItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get assigned student assessments
     */
    async getAssignedStudentAssessmentsRaw(requestParameters: GetAssignedStudentAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseStudentAssessmentDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseStudentAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Get assigned student assessments
     */
    async getAssignedStudentAssessments(requestParameters: GetAssignedStudentAssessmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseStudentAssessmentDto> {
        const response = await this.getAssignedStudentAssessmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get items of a student assessment
     */
    async getStudentAssessmentItemsRaw(requestParameters: GetStudentAssessmentItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseStudentAssessmentItemDto>> {
        if (requestParameters['studentAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentId',
                'Required parameter "studentAssessmentId" was null or undefined when calling getStudentAssessmentItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/{studentAssessmentId}/items`.replace(`{${"studentAssessmentId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseStudentAssessmentItemDtoFromJSON(jsonValue));
    }

    /**
     * Get items of a student assessment
     */
    async getStudentAssessmentItems(requestParameters: GetStudentAssessmentItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseStudentAssessmentItemDto> {
        const response = await this.getStudentAssessmentItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grade a student assessment
     */
    async gradeStudentAssessmentRaw(requestParameters: GradeStudentAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudentAssessmentDto>> {
        if (requestParameters['studentAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentId',
                'Required parameter "studentAssessmentId" was null or undefined when calling gradeStudentAssessment().'
            );
        }

        if (requestParameters['gradeStudentAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'gradeStudentAssessmentRequest',
                'Required parameter "gradeStudentAssessmentRequest" was null or undefined when calling gradeStudentAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/{studentAssessmentId}/grade`.replace(`{${"studentAssessmentId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GradeStudentAssessmentRequestToJSON(requestParameters['gradeStudentAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudentAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Grade a student assessment
     */
    async gradeStudentAssessment(requestParameters: GradeStudentAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudentAssessmentDto> {
        const response = await this.gradeStudentAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start an assigned student assessment
     */
    async startAssignedStudentAssessmentRaw(requestParameters: StartAssignedStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudentAssessmentDto>> {
        if (requestParameters['studentAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentId',
                'Required parameter "studentAssessmentId" was null or undefined when calling startAssignedStudentAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/self/{studentAssessmentId}/start`.replace(`{${"studentAssessmentId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudentAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Start an assigned student assessment
     */
    async startAssignedStudentAssessment(requestParameters: StartAssignedStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudentAssessmentDto> {
        const response = await this.startAssignedStudentAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit an assigned student assessment
     */
    async submitAssignedStudentAssessmentRaw(requestParameters: SubmitAssignedStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudentAssessmentDto>> {
        if (requestParameters['studentAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentId',
                'Required parameter "studentAssessmentId" was null or undefined when calling submitAssignedStudentAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/self/{studentAssessmentId}/submit`.replace(`{${"studentAssessmentId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudentAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Submit an assigned student assessment
     */
    async submitAssignedStudentAssessment(requestParameters: SubmitAssignedStudentAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudentAssessmentDto> {
        const response = await this.submitAssignedStudentAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an item of a student assessment
     */
    async updateStudentAssessmentItemRaw(requestParameters: UpdateStudentAssessmentItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseStudentAssessmentItemDto>> {
        if (requestParameters['studentAssessmentItemId'] == null) {
            throw new runtime.RequiredError(
                'studentAssessmentItemId',
                'Required parameter "studentAssessmentItemId" was null or undefined when calling updateStudentAssessmentItem().'
            );
        }

        if (requestParameters['updateStudentAssessmentItemRequest'] == null) {
            throw new runtime.RequiredError(
                'updateStudentAssessmentItemRequest',
                'Required parameter "updateStudentAssessmentItemRequest" was null or undefined when calling updateStudentAssessmentItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/student-assessments/items/{studentAssessmentItemId}`.replace(`{${"studentAssessmentItemId"}}`, encodeURIComponent(String(requestParameters['studentAssessmentItemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStudentAssessmentItemRequestToJSON(requestParameters['updateStudentAssessmentItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseStudentAssessmentItemDtoFromJSON(jsonValue));
    }

    /**
     * Update an item of a student assessment
     */
    async updateStudentAssessmentItem(requestParameters: UpdateStudentAssessmentItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseStudentAssessmentItemDto> {
        const response = await this.updateStudentAssessmentItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllStudentAssessmentsStatusEnum = {
    NotStarted: 'NOT_STARTED',
    InProgress: 'IN_PROGRESS',
    Submitted: 'SUBMITTED',
    Graded: 'GRADED'
} as const;
export type GetAllStudentAssessmentsStatusEnum = typeof GetAllStudentAssessmentsStatusEnum[keyof typeof GetAllStudentAssessmentsStatusEnum];
