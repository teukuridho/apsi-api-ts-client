/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseClassRoomDto,
  ApiResponsePageInfoResponseClassRoomDto,
  ApiResponseVoid,
  CreateClassRoomRequest,
  GetClassRoomsFilter,
  GetClassRoomsRequest,
  Pageable,
  UpdateClassRoomRequest,
} from '../models/index';
import {
    ApiResponseClassRoomDtoFromJSON,
    ApiResponseClassRoomDtoToJSON,
    ApiResponsePageInfoResponseClassRoomDtoFromJSON,
    ApiResponsePageInfoResponseClassRoomDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    CreateClassRoomRequestFromJSON,
    CreateClassRoomRequestToJSON,
    GetClassRoomsFilterFromJSON,
    GetClassRoomsFilterToJSON,
    GetClassRoomsRequestFromJSON,
    GetClassRoomsRequestToJSON,
    PageableFromJSON,
    PageableToJSON,
    UpdateClassRoomRequestFromJSON,
    UpdateClassRoomRequestToJSON,
} from '../models/index';

export interface CreateClassRoomOperationRequest {
    createClassRoomRequest: CreateClassRoomRequest;
}

export interface DeleteClassRoomRequest {
    classRoomId: number;
}

export interface GetClassRoomByIdRequest {
    classRoomId: number;
}

export interface GetClassroomsRequest {
    filter: GetClassRoomsFilter;
    request: GetClassRoomsRequest;
    pageable: Pageable;
}

export interface UpdateClassRoomOperationRequest {
    classRoomId: number;
    updateClassRoomRequest: UpdateClassRoomRequest;
}

/**
 * 
 */
export class ClassRoomApi extends runtime.BaseAPI {

    /**
     * Create a classroom
     */
    async createClassRoomRaw(requestParameters: CreateClassRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseClassRoomDto>> {
        if (requestParameters['createClassRoomRequest'] == null) {
            throw new runtime.RequiredError(
                'createClassRoomRequest',
                'Required parameter "createClassRoomRequest" was null or undefined when calling createClassRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateClassRoomRequestToJSON(requestParameters['createClassRoomRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseClassRoomDtoFromJSON(jsonValue));
    }

    /**
     * Create a classroom
     */
    async createClassRoom(requestParameters: CreateClassRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseClassRoomDto> {
        const response = await this.createClassRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a classroom
     */
    async deleteClassRoomRaw(requestParameters: DeleteClassRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['classRoomId'] == null) {
            throw new runtime.RequiredError(
                'classRoomId',
                'Required parameter "classRoomId" was null or undefined when calling deleteClassRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms/{classRoomId}`.replace(`{${"classRoomId"}}`, encodeURIComponent(String(requestParameters['classRoomId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a classroom
     */
    async deleteClassRoom(requestParameters: DeleteClassRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteClassRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a classroom by ID
     */
    async getClassRoomByIdRaw(requestParameters: GetClassRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseClassRoomDto>> {
        if (requestParameters['classRoomId'] == null) {
            throw new runtime.RequiredError(
                'classRoomId',
                'Required parameter "classRoomId" was null or undefined when calling getClassRoomById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms/{classRoomId}`.replace(`{${"classRoomId"}}`, encodeURIComponent(String(requestParameters['classRoomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseClassRoomDtoFromJSON(jsonValue));
    }

    /**
     * Get a classroom by ID
     */
    async getClassRoomById(requestParameters: GetClassRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseClassRoomDto> {
        const response = await this.getClassRoomByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get classrooms
     */
    async getClassroomsRaw(requestParameters: GetClassroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseClassRoomDto>> {
        if (requestParameters['filter'] == null) {
            throw new runtime.RequiredError(
                'filter',
                'Required parameter "filter" was null or undefined when calling getClassrooms().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling getClassrooms().'
            );
        }

        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getClassrooms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseClassRoomDtoFromJSON(jsonValue));
    }

    /**
     * Get classrooms
     */
    async getClassrooms(requestParameters: GetClassroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseClassRoomDto> {
        const response = await this.getClassroomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a classroom
     */
    async updateClassRoomRaw(requestParameters: UpdateClassRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseClassRoomDto>> {
        if (requestParameters['classRoomId'] == null) {
            throw new runtime.RequiredError(
                'classRoomId',
                'Required parameter "classRoomId" was null or undefined when calling updateClassRoom().'
            );
        }

        if (requestParameters['updateClassRoomRequest'] == null) {
            throw new runtime.RequiredError(
                'updateClassRoomRequest',
                'Required parameter "updateClassRoomRequest" was null or undefined when calling updateClassRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/classrooms/{classRoomId}`.replace(`{${"classRoomId"}}`, encodeURIComponent(String(requestParameters['classRoomId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClassRoomRequestToJSON(requestParameters['updateClassRoomRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseClassRoomDtoFromJSON(jsonValue));
    }

    /**
     * Update a classroom
     */
    async updateClassRoom(requestParameters: UpdateClassRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseClassRoomDto> {
        const response = await this.updateClassRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
