/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseMultipleChoiceOptionDto,
  ApiResponsePageInfoResponseQuestionDetailDto,
  ApiResponseQuestionDetailDto,
  ApiResponseVoid,
  CreateMultipleChoiceOptionRequest,
  CreateQuestionRequest,
  UpdateMultipleChoiceOptionRequest,
  UpdateQuestionRequest,
} from '../models/index';
import {
    ApiResponseMultipleChoiceOptionDtoFromJSON,
    ApiResponseMultipleChoiceOptionDtoToJSON,
    ApiResponsePageInfoResponseQuestionDetailDtoFromJSON,
    ApiResponsePageInfoResponseQuestionDetailDtoToJSON,
    ApiResponseQuestionDetailDtoFromJSON,
    ApiResponseQuestionDetailDtoToJSON,
    ApiResponseVoidFromJSON,
    ApiResponseVoidToJSON,
    CreateMultipleChoiceOptionRequestFromJSON,
    CreateMultipleChoiceOptionRequestToJSON,
    CreateQuestionRequestFromJSON,
    CreateQuestionRequestToJSON,
    UpdateMultipleChoiceOptionRequestFromJSON,
    UpdateMultipleChoiceOptionRequestToJSON,
    UpdateQuestionRequestFromJSON,
    UpdateQuestionRequestToJSON,
} from '../models/index';

export interface CreateMultipleChoiceOptionOperationRequest {
    questionId: number;
    createMultipleChoiceOptionRequest: CreateMultipleChoiceOptionRequest;
}

export interface CreateQuestionOperationRequest {
    createQuestionRequest: CreateQuestionRequest;
}

export interface DeleteMultipleChoiceOptionRequest {
    optionId: number;
}

export interface DeleteQuestionRequest {
    questionId: number;
}

export interface GetQuestionRequest {
    questionId: number;
}

export interface GetQuestionsRequest {
    description?: string | null;
    type?: GetQuestionsTypeEnum;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface UpdateMultipleChoiceOptionOperationRequest {
    optionId: number;
    updateMultipleChoiceOptionRequest: UpdateMultipleChoiceOptionRequest;
}

export interface UpdateQuestionOperationRequest {
    questionId: number;
    updateQuestionRequest: UpdateQuestionRequest;
}

/**
 * 
 */
export class QuestionsApi extends runtime.BaseAPI {

    /**
     * Create a multiple choice option
     */
    async createMultipleChoiceOptionRaw(requestParameters: CreateMultipleChoiceOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMultipleChoiceOptionDto>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling createMultipleChoiceOption().'
            );
        }

        if (requestParameters['createMultipleChoiceOptionRequest'] == null) {
            throw new runtime.RequiredError(
                'createMultipleChoiceOptionRequest',
                'Required parameter "createMultipleChoiceOptionRequest" was null or undefined when calling createMultipleChoiceOption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{questionId}/multiple-choice-options`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMultipleChoiceOptionRequestToJSON(requestParameters['createMultipleChoiceOptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseMultipleChoiceOptionDtoFromJSON(jsonValue));
    }

    /**
     * Create a multiple choice option
     */
    async createMultipleChoiceOption(requestParameters: CreateMultipleChoiceOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMultipleChoiceOptionDto> {
        const response = await this.createMultipleChoiceOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a question
     */
    async createQuestionRaw(requestParameters: CreateQuestionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseQuestionDetailDto>> {
        if (requestParameters['createQuestionRequest'] == null) {
            throw new runtime.RequiredError(
                'createQuestionRequest',
                'Required parameter "createQuestionRequest" was null or undefined when calling createQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuestionRequestToJSON(requestParameters['createQuestionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseQuestionDetailDtoFromJSON(jsonValue));
    }

    /**
     * Create a question
     */
    async createQuestion(requestParameters: CreateQuestionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseQuestionDetailDto> {
        const response = await this.createQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a multiple choice option
     */
    async deleteMultipleChoiceOptionRaw(requestParameters: DeleteMultipleChoiceOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling deleteMultipleChoiceOption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/multiple-choice-options/{optionId}`.replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a multiple choice option
     */
    async deleteMultipleChoiceOption(requestParameters: DeleteMultipleChoiceOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteMultipleChoiceOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a question
     */
    async deleteQuestionRaw(requestParameters: DeleteQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseVoid>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling deleteQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseVoidFromJSON(jsonValue));
    }

    /**
     * Delete a question
     */
    async deleteQuestion(requestParameters: DeleteQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseVoid> {
        const response = await this.deleteQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a question by ID
     */
    async getQuestionRaw(requestParameters: GetQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseQuestionDetailDto>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling getQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseQuestionDetailDtoFromJSON(jsonValue));
    }

    /**
     * Get a question by ID
     */
    async getQuestion(requestParameters: GetQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseQuestionDetailDto> {
        const response = await this.getQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get questions
     */
    async getQuestionsRaw(requestParameters: GetQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageInfoResponseQuestionDetailDto>> {
        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageInfoResponseQuestionDetailDtoFromJSON(jsonValue));
    }

    /**
     * Get questions
     */
    async getQuestions(requestParameters: GetQuestionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageInfoResponseQuestionDetailDto> {
        const response = await this.getQuestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a multiple choice option
     */
    async updateMultipleChoiceOptionRaw(requestParameters: UpdateMultipleChoiceOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMultipleChoiceOptionDto>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling updateMultipleChoiceOption().'
            );
        }

        if (requestParameters['updateMultipleChoiceOptionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateMultipleChoiceOptionRequest',
                'Required parameter "updateMultipleChoiceOptionRequest" was null or undefined when calling updateMultipleChoiceOption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/multiple-choice-options/{optionId}`.replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMultipleChoiceOptionRequestToJSON(requestParameters['updateMultipleChoiceOptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseMultipleChoiceOptionDtoFromJSON(jsonValue));
    }

    /**
     * Update a multiple choice option
     */
    async updateMultipleChoiceOption(requestParameters: UpdateMultipleChoiceOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMultipleChoiceOptionDto> {
        const response = await this.updateMultipleChoiceOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a question
     */
    async updateQuestionRaw(requestParameters: UpdateQuestionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseQuestionDetailDto>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling updateQuestion().'
            );
        }

        if (requestParameters['updateQuestionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateQuestionRequest',
                'Required parameter "updateQuestionRequest" was null or undefined when calling updateQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateQuestionRequestToJSON(requestParameters['updateQuestionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseQuestionDetailDtoFromJSON(jsonValue));
    }

    /**
     * Update a question
     */
    async updateQuestion(requestParameters: UpdateQuestionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseQuestionDetailDto> {
        const response = await this.updateQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetQuestionsTypeEnum = {
    FreeResponse: 'FREE_RESPONSE',
    MultipleChoice: 'MULTIPLE_CHOICE'
} as const;
export type GetQuestionsTypeEnum = typeof GetQuestionsTypeEnum[keyof typeof GetQuestionsTypeEnum];
