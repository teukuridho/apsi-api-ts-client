/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BookCategoryDto } from './BookCategoryDto';
import {
    BookCategoryDtoFromJSON,
    BookCategoryDtoFromJSONTyped,
    BookCategoryDtoToJSON,
    BookCategoryDtoToJSONTyped,
} from './BookCategoryDto';

/**
 * 
 * @export
 * @interface BookDto
 */
export interface BookDto {
    /**
     * 
     * @type {number}
     * @memberof BookDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    isbn: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    publisher?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    language?: string;
    /**
     * 
     * @type {Set<BookCategoryDto>}
     * @memberof BookDto
     */
    categories: Set<BookCategoryDto>;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    file?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookDto
     */
    photoFiles: Array<string>;
}

/**
 * Check if a given object implements the BookDto interface.
 */
export function instanceOfBookDto(value: object): value is BookDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('isbn' in value) || value['isbn'] === undefined) return false;
    if (!('categories' in value) || value['categories'] === undefined) return false;
    if (!('photoFiles' in value) || value['photoFiles'] === undefined) return false;
    return true;
}

export function BookDtoFromJSON(json: any): BookDto {
    return BookDtoFromJSONTyped(json, false);
}

export function BookDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'author': json['author'] == null ? undefined : json['author'],
        'isbn': json['isbn'],
        'publisher': json['publisher'] == null ? undefined : json['publisher'],
        'language': json['language'] == null ? undefined : json['language'],
        'categories': (new Set((json['categories'] as Array<any>).map(BookCategoryDtoFromJSON))),
        'file': json['file'] == null ? undefined : json['file'],
        'photoFiles': json['photoFiles'],
    };
}

export function BookDtoToJSON(json: any): BookDto {
    return BookDtoToJSONTyped(json, false);
}

export function BookDtoToJSONTyped(value?: BookDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'author': value['author'],
        'isbn': value['isbn'],
        'publisher': value['publisher'],
        'language': value['language'],
        'categories': (Array.from(value['categories'] as Set<any>).map(BookCategoryDtoToJSON)),
        'file': value['file'],
        'photoFiles': value['photoFiles'],
    };
}

