/* tslint:disable */
/* eslint-disable */
/**
 * APSI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoleDto } from './RoleDto';
import {
    RoleDtoFromJSON,
    RoleDtoFromJSONTyped,
    RoleDtoToJSON,
    RoleDtoToJSONTyped,
} from './RoleDto';
import type { SchoolDto } from './SchoolDto';
import {
    SchoolDtoFromJSON,
    SchoolDtoFromJSONTyped,
    SchoolDtoToJSON,
    SchoolDtoToJSONTyped,
} from './SchoolDto';

/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    username: string;
    /**
     * 
     * @type {Set<RoleDto>}
     * @memberof UserDto
     */
    roles: Set<RoleDto>;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    gender?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    address?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserDto
     */
    birthday?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    phone?: string;
    /**
     * 
     * @type {SchoolDto}
     * @memberof UserDto
     */
    school?: SchoolDto;
}

/**
 * Check if a given object implements the UserDto interface.
 */
export function instanceOfUserDto(value: object): value is UserDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('roles' in value) || value['roles'] === undefined) return false;
    return true;
}

export function UserDtoFromJSON(json: any): UserDto {
    return UserDtoFromJSONTyped(json, false);
}

export function UserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'roles': (new Set((json['roles'] as Array<any>).map(RoleDtoFromJSON))),
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'gender': json['gender'] == null ? undefined : json['gender'],
        'address': json['address'] == null ? undefined : json['address'],
        'birthday': json['birthday'] == null ? undefined : (new Date(json['birthday'])),
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'school': json['school'] == null ? undefined : SchoolDtoFromJSON(json['school']),
    };
}

export function UserDtoToJSON(json: any): UserDto {
    return UserDtoToJSONTyped(json, false);
}

export function UserDtoToJSONTyped(value?: UserDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'username': value['username'],
        'roles': (Array.from(value['roles'] as Set<any>).map(RoleDtoToJSON)),
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'gender': value['gender'],
        'address': value['address'],
        'birthday': value['birthday'] == null ? undefined : ((value['birthday']).toISOString().substring(0,10)),
        'email': value['email'],
        'phone': value['phone'],
        'school': SchoolDtoToJSON(value['school']),
    };
}

